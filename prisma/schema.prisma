generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model coaches {
  coach_id         Int       @id @default(autoincrement())
  user_id          Int
  specialty        String?   @db.VarChar(100)
  experience_years Int?
  users            users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Restrict, map: "coaches_ibfk_1")
  courses          courses[]

  @@index([user_id], map: "user_id")
}

model courses {
  course_id      Int            @id @default(autoincrement())
  course_name    String         @db.VarChar(100)
  description    String?        @db.Text
  level          courses_level?
  price          Decimal?       @db.Decimal(10, 2)
  duration_weeks Int?
  coach_id       Int?
  coaches        coaches?       @relation(fields: [coach_id], references: [coach_id], onDelete: Restrict, onUpdate: Restrict, map: "courses_ibfk_1")
  enrollments    enrollments[]
  schedules      schedules[]

  @@index([coach_id], map: "coach_id")
}

model enrollments {
  enrollment_id Int                 @id @default(autoincrement())
  user_id       Int
  course_id     Int
  enroll_date   DateTime            @default(now()) @db.Timestamp(0)
  status        enrollments_status? @default(pending)
  users         users               @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "enrollments_ibfk_1")
  courses       courses             @relation(fields: [course_id], references: [course_id], onUpdate: Restrict, map: "enrollments_ibfk_2")
  payments      payments[]

  @@index([course_id], map: "course_id")
  @@index([user_id], map: "user_id")
}

model event_registrations {
  registration_id Int      @id @default(autoincrement())
  user_id         Int
  event_id        Int
  register_date   DateTime @default(now()) @db.Timestamp(0)
  users           users    @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "event_registrations_ibfk_1")
  events          events   @relation(fields: [event_id], references: [event_id], onUpdate: Restrict, map: "event_registrations_ibfk_2")

  @@index([event_id], map: "event_id")
  @@index([user_id], map: "user_id")
}

model events {
  event_id            Int                   @id @default(autoincrement())
  event_name          String                @db.VarChar(100)
  description         String?               @db.Text
  event_date          DateTime              @db.Date
  location            String?               @db.VarChar(100)
  created_at          DateTime              @default(now()) @db.Timestamp(0)
  event_registrations event_registrations[]
}

model payments {
  payment_id    Int              @id @default(autoincrement())
  enrollment_id Int
  amount        Decimal          @db.Decimal(10, 2)
  payment_date  DateTime         @default(now()) @db.Timestamp(0)
  method        payments_method?
  status        payments_status? @default(pending)
  enrollments   enrollments      @relation(fields: [enrollment_id], references: [enrollment_id], onUpdate: Restrict, map: "payments_ibfk_1")

  @@index([enrollment_id], map: "enrollment_id")
}

model posts {
  post_id    Int             @id @default(autoincrement())
  user_id    Int
  title      String          @db.VarChar(200)
  content    String          @db.Text
  image      String?         @db.VarChar(255)
  category   posts_category? @default(news)
  created_at DateTime        @default(now()) @db.Timestamp(0)
  updated_at DateTime        @default(now()) @db.Timestamp(0)
  users      users           @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "posts_ibfk_1")

  @@index([user_id], map: "user_id")
}

model schedules {
  schedule_id   Int      @id @default(autoincrement())
  course_id     Int
  training_date DateTime @db.Date
  start_time    DateTime @db.Time(0)
  end_time      DateTime @db.Time(0)
  location      String?  @db.VarChar(100)
  courses       courses  @relation(fields: [course_id], references: [course_id], onUpdate: Restrict, map: "schedules_ibfk_1")

  @@index([course_id], map: "course_id")
}

model users {
  user_id             Int                   @id @default(autoincrement())
  full_name           String                @db.VarChar(100)
  email               String                @unique(map: "email") @db.VarChar(100)
  password            String                @db.VarChar(255)
  phone               String?               @db.VarChar(20)
  role                users_role?           @default(student)
  created_at          DateTime              @default(now()) @db.Timestamp(0)
  coaches             coaches[]
  enrollments         enrollments[]
  event_registrations event_registrations[]
  posts               posts[]
}

enum courses_level {
  beginner
  intermediate
  advanced
}

enum enrollments_status {
  pending
  active
  completed
  cancelled
}

enum payments_method {
  cash
  credit_card
  bank_transfer
  paypal
}

enum payments_status {
  success
  failed
  pending
}

enum posts_category {
  news
  blog
  announcement
  tips
}

enum users_role {
  student
  coach
  admin
}
